name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.10"

jobs:
  # Code quality checks
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          
      - name: Run black
        run: black --check --diff odordiff2 tests
        
      - name: Run isort
        run: isort --check-only --diff odordiff2 tests
        
      - name: Run flake8
        run: flake8 odordiff2 tests
        
      - name: Run mypy
        run: mypy odordiff2
        
      - name: Run bandit
        run: bandit -r odordiff2 -f json -o bandit-report.json
        continue-on-error: true
        
      - name: Upload bandit report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json

  # Security checks
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install safety
        run: pip install safety
        
      - name: Run safety check
        run: safety check --json --output safety-report.json
        continue-on-error: true
        
      - name: Upload safety report
        uses: actions/upload-artifact@v3
        with:
          name: safety-report
          path: safety-report.json

  # Unit tests
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
          
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxrender1 libxext6
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,vis]
          
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=odordiff2 --cov-report=xml --cov-report=html
          
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Integration tests
  integration:
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,vis]
          
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --timeout=300
        env:
          REDIS_URL: redis://localhost:6379

  # Performance tests
  performance:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,monitoring]
          
      - name: Run performance tests
        run: |
          pytest tests/performance/ -v --timeout=600 -m "not slow"
          
      - name: Generate performance report
        run: |
          echo "Performance test results:" > performance-report.txt
          echo "=========================" >> performance-report.txt
          pytest tests/performance/ -v --tb=no -q >> performance-report.txt
          
      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.txt

  # Security tests
  security-tests:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          
      - name: Run security tests
        run: |
          pytest tests/safety/ -v --timeout=300
          
      - name: Generate security report
        run: |
          echo "Security test results:" > security-test-report.txt
          echo "=====================" >> security-test-report.txt
          pytest tests/safety/ -v --tb=no -q >> security-test-report.txt
          
      - name: Upload security test report
        uses: actions/upload-artifact@v3
        with:
          name: security-test-report
          path: security-test-report.txt

  # Build and test Docker image
  docker:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Log in to Docker Hub
        if: github.event_name == 'release'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: danieleschmidt/odordiff2
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name == 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # API tests
  api-tests:
    runs-on: ubuntu-latest
    needs: [integration]
    
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          
      - name: Start API server
        run: |
          uvicorn odordiff2.api.endpoints:app --host 0.0.0.0 --port 8000 &
          sleep 10
          
      - name: Test API health
        run: |
          curl -f http://localhost:8000/health || exit 1
          
      - name: Run API tests
        run: |
          pytest tests/ -k "api" -v

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration, performance, security-tests, api-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Would deploy to staging environment"
          # Add actual deployment steps here

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [integration, performance, security-tests, api-tests, docker]
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Would deploy to production environment"
          # Add actual deployment steps here
          
      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: Production" >> $GITHUB_STEP_SUMMARY
          echo "- Status: Success" >> $GITHUB_STEP_SUMMARY